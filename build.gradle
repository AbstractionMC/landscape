//file:noinspection GradlePackageVersionRange
plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-vineflower' version '1.11.0'
	id 'signing'
}

allprojects {
	apply plugin: "java"
	apply plugin: "fabric-loom"
	apply plugin: "maven-publish"
	apply plugin: "signing"

	group = 'net.rotgruengelb'
	version = "${project.mod_version}+${rootProject.minecraft_version}"

	def ENV = System.getenv()
	def publishType = System.getenv("PUBLISH_TYPE")
	def uniqueId = System.getenv("UNIQUE_ID")

	if (publishType == "SNAPSHOT") {
		version = "${version}-${uniqueId}-SNAPSHOT"
	}

	group = rootProject.maven_group

	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}

	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
		exclusiveContent {
			forRepository {
				maven { name = "Modrinth"; url = "https://api.modrinth.com/maven" }
			}
			filter { includeGroup "maven.modrinth" }
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		include(implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1"))
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
		include(modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT'))
		include(implementation(annotationProcessor("net.rotgruengelb:nixienaut:${project.nixienaut_version}")))
		include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))
	}

	processResources {
		inputs.property "version", project.version
		inputs.property "minecraft_version", project.minecraft_version
		inputs.property "loader_version", project.loader_version
		filteringCharset "UTF-8"

		filesMatching("fabric.mod.json") {
			expand "version": project.version,
					"minecraft_version": project.minecraft_version,
					"loader_version": project.loader_version,
					"quirl_version": project.quirl_version
		}
	}

	loom {
		splitEnvironmentSourceSets()
		accessWidenerPath = file("src/main/resources/landscape.accesswidener")

		mods {
			"landscape" {
				sourceSet sourceSets.main
				sourceSet sourceSets.client
			}
		}
	}

	def targetJavaVersion = 17
	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
			it.options.release = targetJavaVersion
		}
	}

	java {
		def javaVersion = JavaVersion.toVersion(targetJavaVersion)
		if (JavaVersion.current() < javaVersion) {
			toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
		}
		withSourcesJar()
		withJavadocJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = rootProject.maven_group
				artifactId = 'landscape'
				version = "${version}"
				from components.java

				pom {
					name = 'landscape'
					description = 'A Minecraft FabricMC Mod adding Utilities for creating Adventure maps.'
					url = 'https://github.com/AbstractionMC/landscape'
					licenses {
						license {
							name = 'MIT License'
							url = 'https://opensource.org/license/MIT'
						}
					}
					developers {
						developer {
							id = 'rotgruengelb'
							name = 'Daniel (aka. rotgruengelb)'
							email = 'rotgrungelblab@gmail.com'
						}
					}
					scm {
						connection = 'scm:git:git://github.com/rotgruengelb/quirl.git'
						developerConnection = 'scm:git:ssh://github.com/AbstractionMC/landscape.git'
						url = 'https://github.com/AbstractionMC/landscape/'
					}
				}
			}
		}

		repositories {
			maven {
				name = "OSSRH"
				url = System.getenv("OSSRH_URL")
				credentials {
					username = System.getenv("OSSRH_USERNAME")
					password = System.getenv("OSSRH_PASSWORD")
				}
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}


	javadoc {
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}
